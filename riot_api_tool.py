import requests\nimport json\nimport time\nimport os\nimport threading\nfrom datetime import datetime\nfrom typing import Dict, List, Optional, Tuple\n\ntry:\n    from config import RIOT_API_KEY, MONITOR_INTERVAL, DATA_DIR\nexcept ImportError:\n    print(\"⚠️  config.pyが見つかりません。config.py.exampleをconfig.pyにコピーしてAPI Keyを設定してください。\")\n    RIOT_API_KEY = \"\"\n    MONITOR_INTERVAL = 10\n    DATA_DIR = \"spectator_data\"\n\nclass RiotAPISpectatorTool:\n    def __init__(self, api_key: str = None):\n        \"\"\"\n        Riot API キーを使ってツールを初期化\n        \"\"\"\n        self.api_key = api_key or RIOT_API_KEY\n        if not self.api_key:\n            raise ValueError(\"API Keyが設定されていません。config.pyを確認してください。\")\n            \n        self.headers = {\"X-Riot-Token\": self.api_key}\n        \n        # リージョナルルーティング\n        self.regional_urls = {\n            \"kr\": \"https://kr.api.riotgames.com\",\n            \"euw1\": \"https://euw1.api.riotgames.com\", \n            \"eun1\": \"https://eun1.api.riotgames.com\",\n            \"na1\": \"https://na1.api.riotgames.com\",\n            \"br1\": \"https://br1.api.riotgames.com\",\n            \"jp1\": \"https://jp1.api.riotgames.com\",\n            \"la1\": \"https://la1.api.riotgames.com\",\n            \"la2\": \"https://la2.api.riotgames.com\",\n            \"oc1\": \"https://oc1.api.riotgames.com\",\n            \"tr1\": \"https://tr1.api.riotgames.com\",\n            \"ru\": \"https://ru.api.riotgames.com\"\n        }\n        \n        # クラスターマッピング\n        self.cluster_urls = {\n            \"americas\": \"https://americas.api.riotgames.com\",\n            \"asia\": \"https://asia.api.riotgames.com\", \n            \"europe\": \"https://europe.api.riotgames.com\",\n            \"esports\": \"https://esports.api.riotgames.com\"\n        }\n        \n        # リージョンとクラスターのマッピング\n        self.region_to_cluster = {\n            \"kr\": \"asia\",\n            \"jp1\": \"asia\",\n            \"euw1\": \"europe\",\n            \"eun1\": \"europe\", \n            \"tr1\": \"europe\",\n            \"ru\": \"europe\",\n            \"na1\": \"americas\",\n            \"br1\": \"americas\",\n            \"la1\": \"americas\",\n            \"la2\": \"americas\",\n            \"oc1\": \"americas\"\n        }\n        \n        # 監視状態管理\n        self.monitoring = False\n        self.monitored_players = []\n        self.current_games = {}  # puuid -> game_data\n        \n        # 有名プロプレイヤーのサンプル（RiotID形式）\n        self.pro_players = {\n            \"kr\": [\n                {\"game_name\": \"Hide on bush\", \"tag_line\": \"KR1\"},  # Faker\n                {\"game_name\": \"T1 Zeus\", \"tag_line\": \"KR1\"},\n                {\"game_name\": \"T1 Oner\", \"tag_line\": \"KR1\"},\n                {\"game_name\": \"T1 Gumayusi\", \"tag_line\": \"KR1\"},\n                {\"game_name\": \"T1 Keria\", \"tag_line\": \"KR1\"},\n                {\"game_name\": \"GenG Chovy\", \"tag_line\": \"KR1\"},\n                {\"game_name\": \"GenG Canyon\", \"tag_line\": \"KR1\"}\n            ],\n            \"euw1\": [\n                {\"game_name\": \"Caps\", \"tag_line\": \"G2\"},\n                {\"game_name\": \"Jankos\", \"tag_line\": \"EUW\"},\n                {\"game_name\": \"Rekkles\", \"tag_line\": \"EUW\"},\n                {\"game_name\": \"Mikyx\", \"tag_line\": \"G2\"},\n                {\"game_name\": \"Wunder\", \"tag_line\": \"EUW\"}\n            ]\n        }\n    \n    def get_account_by_riot_id(self, game_name: str, tag_line: str, cluster: str = \"asia\") -> Optional[Dict]:\n        \"\"\"\n        RiotID (ゲーム名 + タグ) からアカウント情報とPUUIDを取得\n        \"\"\"\n        url = f\"{self.cluster_urls[cluster]}/riot/account/v1/accounts/by-riot-id/{game_name}/{tag_line}\"\n        \n        try:\n            response = requests.get(url, headers=self.headers)\n            if response.status_code == 200:\n                return response.json()\n            else:\n                print(f\"アカウント取得エラー: {response.status_code} - {game_name}#{tag_line}\")\n                return None\n        except Exception as e:\n            print(f\"API呼び出しエラー: {e}\")\n            return None\n    \n    def get_summoner_by_puuid(self, puuid: str, region: str) -> Optional[Dict]:\n        \"\"\"\n        PUUIDからサマナー情報を取得\n        \"\"\"\n        url = f\"{self.regional_urls[region]}/lol/summoner/v4/summoners/by-puuid/{puuid}\"\n        \n        try:\n            response = requests.get(url, headers=self.headers)\n            if response.status_code == 200:\n                return response.json()\n            else:\n                print(f\"サマナー取得エラー: {response.status_code}\")\n                return None\n        except Exception as e:\n            print(f\"API呼び出しエラー: {e}\")\n            return None\n    \n    def get_current_game(self, puuid: str, region: str) -> Optional[Dict]:\n        \"\"\"\n        現在進行中のゲーム情報を取得\n        \"\"\"\n        # まずサマナー情報を取得\n        summoner = self.get_summoner_by_puuid(puuid, region)\n        if not summoner:\n            return None\n        \n        url = f\"{self.regional_urls[region]}/lol/spectator/v4/active-games/by-summoner/{summoner['id']}\"\n        \n        try:\n            response = requests.get(url, headers=self.headers)\n            if response.status_code == 200:\n                game_data = response.json()\n                # ソロランクかチェック (queueId: 420 = Ranked Solo)\n                if game_data.get(\"gameQueueConfigId\") == 420:\n                    return game_data\n                else:\n                    return None\n            elif response.status_code == 404:\n                return None  # ゲーム中ではない\n            else:\n                print(f\"観戦データ取得エラー: {response.status_code}\")\n                return None\n        except Exception as e:\n            print(f\"API呼び出しエラー: {e}\")\n            return None\n    \n    def get_match_details(self, match_id: str, cluster: str) -> Optional[Dict]:\n        \"\"\"\n        特定の試合の詳細データを取得\n        \"\"\"\n        url = f\"{self.cluster_urls[cluster]}/lol/match/v5/matches/{match_id}\"\n        \n        try:\n            response = requests.get(url, headers=self.headers)\n            if response.status_code == 200:\n                return response.json()\n            else:\n                print(f\"試合詳細取得エラー: {response.status_code} - {match_id}\")\n                return None\n        except Exception as e:\n            print(f\"API呼び出しエラー: {e}\")\n            return None\n    \n    def add_player_to_monitor(self, game_name: str, tag_line: str, region: str, cluster: str = None):\n        \"\"\"\n        監視対象プレイヤーを追加\n        \"\"\"\n        if cluster is None:\n            cluster = self.region_to_cluster.get(region, \"asia\")\n            \n        account = self.get_account_by_riot_id(game_name, tag_line, cluster)\n        if account:\n            player_data = {\n                \"game_name\": game_name,\n                \"tag_line\": tag_line,\n                \"puuid\": account[\"puuid\"],\n                \"region\": region,\n                \"cluster\": cluster\n            }\n            \n            # 重複チェック\n            for existing in self.monitored_players:\n                if existing[\"puuid\"] == account[\"puuid\"]:\n                    print(f\"プレイヤー {game_name}#{tag_line} は既に監視対象です\")\n                    return False\n            \n            self.monitored_players.append(player_data)\n            print(f\"✓ プレイヤー {game_name}#{tag_line} を監視対象に追加しました\")\n            return True\n        else:\n            print(f\"プレイヤー {game_name}#{tag_line} が見つかりません\")\n            return False\n    \n    def remove_player_from_monitor(self, game_name: str, tag_line: str):\n        \"\"\"\n        監視対象プレイヤーを削除\n        \"\"\"\n        for i, player in enumerate(self.monitored_players):\n            if player[\"game_name\"] == game_name and player[\"tag_line\"] == tag_line:\n                removed = self.monitored_players.pop(i)\n                # 現在のゲームデータも削除\n                if removed[\"puuid\"] in self.current_games:\n                    del self.current_games[removed[\"puuid\"]]\n                print(f\"✓ プレイヤー {game_name}#{tag_line} を監視対象から削除しました\")\n                return True\n        \n        print(f\"プレイヤー {game_name}#{tag_line} は監視対象にありません\")\n        return False\n    \n    def start_monitoring(self):\n        \"\"\"\n        ソロランク監視を開始\n        \"\"\"\n        if self.monitoring:\n            print(\"既に監視中です\")\n            return\n        \n        if not self.monitored_players:\n            print(\"監視対象プレイヤーが設定されていません\")\n            return\n        \n        self.monitoring = True\n        print(f\"✓ {len(self.monitored_players)} 人のプレイヤーの監視を開始しました\")\n        print(\"=== 監視ログ ===\")\n        \n        # 監視ループを別スレッドで実行\n        monitor_thread = threading.Thread(target=self._monitor_loop)\n        monitor_thread.daemon = True\n        monitor_thread.start()\n    \n    def stop_monitoring(self):\n        \"\"\"\n        監視を停止\n        \"\"\"\n        self.monitoring = False\n        print(\"✓ 監視を停止しました\")\n    \n    def _monitor_loop(self):\n        \"\"\"\n        監視メインループ\n        \"\"\"\n        while self.monitoring:\n            for player in self.monitored_players:\n                if not self.monitoring:\n                    break\n                \n                puuid = player[\"puuid\"]\n                game_name = player[\"game_name\"]\n                tag_line = player[\"tag_line\"]\n                region = player[\"region\"]\n                cluster = player[\"cluster\"]\n                \n                try:\n                    current_game = self.get_current_game(puuid, region)\n                    \n                    if current_game and puuid not in self.current_games:\n                        # 新しいソロランクゲームが開始された\n                        self.current_games[puuid] = current_game\n                        timestamp = datetime.now().strftime(\"%H:%M:%S\")\n                        print(f\"[{timestamp}] 🎮 {game_name}#{tag_line} がソロランクを開始しました！\")\n                        \n                        # 観戦データをダウンロード\n                        self._download_live_game_data(player, current_game)\n                    \n                    elif not current_game and puuid in self.current_games:\n                        # ゲームが終了した\n                        del self.current_games[puuid]\n                        timestamp = datetime.now().strftime(\"%H:%M:%S\")\n                        print(f\"[{timestamp}] 🏁 {game_name}#{tag_line} のゲームが終了しました\")\n                    \n                except Exception as e:\n                    print(f\"監視エラー ({game_name}#{tag_line}): {e}\")\n                \n                # 10秒待機\n                time.sleep(MONITOR_INTERVAL)\n            \n            # 全プレイヤーチェック後に少し待機\n            if self.monitoring:\n                time.sleep(1)\n    \n    def _download_live_game_data(self, player: Dict, game_data: Dict):\n        \"\"\"\n        ライブゲームデータをダウンロード\n        \"\"\"\n        try:\n            timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n            game_name = player[\"game_name\"]\n            tag_line = player[\"tag_line\"]\n            region = player[\"region\"]\n            \n            # データ保存ディレクトリ作成\n            data_dir = os.path.join(DATA_DIR, region, f\"{game_name}_{tag_line}\")\n            os.makedirs(data_dir, exist_ok=True)\n            \n            # ライブゲームデータを保存\n            filename = os.path.join(data_dir, f\"live_game_{timestamp}.json\")\n            \n            # プレイヤー情報を追加\n            enhanced_data = {\n                \"target_player\": {\n                    \"game_name\": game_name,\n                    \"tag_line\": tag_line,\n                    \"puuid\": player[\"puuid\"],\n                    \"region\": region\n                },\n                \"download_time\": datetime.now().isoformat(),\n                \"game_data\": game_data\n            }\n            \n            with open(filename, 'w', encoding='utf-8') as f:\n                json.dump(enhanced_data, f, ensure_ascii=False, indent=2)\n            \n            print(f\"  → 観戦データを保存: {filename}\")\n            \n            # 参加者リストを表示\n            participants = game_data.get(\"participants\", [])\n            print(f\"  → 参加者: {len(participants)} 人\")\n            for i, p in enumerate(participants[:5]):  # 最初の5人だけ表示\n                champion_id = p.get('championId', 'Unknown')\n                summoner_name = p.get('summonerName', 'Unknown')\n                print(f\"    {i+1}. {summoner_name} (Champion: {champion_id})\")\n            \n        except Exception as e:\n            print(f\"観戦データダウンロードエラー: {e}\")\n    \n    def list_monitored_players(self):\n        \"\"\"\n        現在の監視対象プレイヤーリストを表示\n        \"\"\"\n        if not self.monitored_players:\n            print(\"監視対象プレイヤーはいません\")\n            return\n        \n        print(f\"\\n=== 監視対象プレイヤー ({len(self.monitored_players)} 人) ===\")\n        for i, player in enumerate(self.monitored_players, 1):\n            status = \"🎮 ゲーム中\" if player[\"puuid\"] in self.current_games else \"⭕ 待機中\"\n            print(f\"{i}. {player['game_name']}#{player['tag_line']} ({player['region']}) - {status}\")\n    \n    def add_pro_players_by_region(self, region: str):\n        \"\"\"\n        特定地域のプロプレイヤーを一括追加\n        \"\"\"\n        if region not in self.pro_players:\n            print(f\"地域 {region} のプロプレイヤーデータがありません\")\n            return\n        \n        cluster = self.region_to_cluster.get(region, \"asia\")\n        added = 0\n        \n        for pro in self.pro_players[region]:\n            if self.add_player_to_monitor(pro[\"game_name\"], pro[\"tag_line\"], region, cluster):\n                added += 1\n                time.sleep(1)  # API制限対策\n        \n        print(f\"✓ {region} から {added} 人のプロプレイヤーを追加しました\")\n\ndef main():\n    \"\"\"\n    メイン実行関数\n    \"\"\"\n    print(\"=== Riot API ソロランク監視&観戦データ取得ツール ===\")\n    print(f\"API Key設定ファイル: config.py\")\n    print(f\"データ保存先: {DATA_DIR}\")\n    print(f\"監視間隔: {MONITOR_INTERVAL}秒\\n\")\n    \n    try:\n        tool = RiotAPISpectatorTool()\n    except ValueError as e:\n        print(f\"エラー: {e}\")\n        print(\"\\n1. config.py.example を config.py にコピー\")\n        print(\"2. RIOT_API_KEY に Personal API Key を設定\")\n        print(\"3. Riot Developer Portal: https://developer.riotgames.com/\")\n        return\n    \n    while True:\n        print(\"\\n=== メニュー ===\")\n        print(\"1. プレイヤーを監視対象に追加\")\n        print(\"2. プレイヤーを監視対象から削除\") \n        print(\"3. 監視対象プレイヤー一覧表示\")\n        print(\"4. プロプレイヤーを地域別一括追加\")\n        print(\"5. ソロランク監視開始\")\n        print(\"6. 監視停止\")\n        print(\"7. 利用可能地域一覧表示\")\n        print(\"0. 終了\")\n        \n        choice = input(\"\\n選択してください (0-7): \").strip()\n        \n        if choice == \"0\":\n            tool.stop_monitoring()\n            print(\"ツールを終了します\")\n            break\n        \n        elif choice == \"1\":\n            game_name = input(\"ゲーム名を入力: \").strip()\n            tag_line = input(\"タグラインを入力: \").strip()\n            \n            print(\"\\n利用可能地域:\")\n            regions = list(tool.regional_urls.keys())\n            for i, region in enumerate(regions):\n                print(f\"{i+1}. {region}\")\n            \n            try:\n                region_idx = int(input(f\"地域を選択 (1-{len(regions)}): \")) - 1\n                region = regions[region_idx]\n                cluster = tool.region_to_cluster.get(region, \"asia\")\n                \n                tool.add_player_to_monitor(game_name, tag_line, region, cluster)\n            except (ValueError, IndexError):\n                print(\"無効な選択です\")\n        \n        elif choice == \"2\":\n            game_name = input(\"削除するゲーム名を入力: \").strip()\n            tag_line = input(\"削除するタグラインを入力: \").strip()\n            tool.remove_player_from_monitor(game_name, tag_line)\n        \n        elif choice == \"3\":\n            tool.list_monitored_players()\n        \n        elif choice == \"4\":\n            print(\"\\n利用可能地域:\")\n            available_regions = list(tool.pro_players.keys())\n            for i, region in enumerate(available_regions):\n                print(f\"{i+1}. {region}\")\n            \n            try:\n                region_idx = int(input(f\"地域を選択 (1-{len(available_regions)}): \")) - 1\n                region = available_regions[region_idx]\n                tool.add_pro_players_by_region(region)\n            except (ValueError, IndexError):\n                print(\"無効な選択です\")\n        \n        elif choice == \"5\":\n            tool.start_monitoring()\n        \n        elif choice == \"6\":\n            tool.stop_monitoring()\n        \n        elif choice == \"7\":\n            print(\"\\n=== 利用可能地域 ===\")\n            for region, url in tool.regional_urls.items():\n                cluster = tool.region_to_cluster.get(region, \"不明\")\n                print(f\"{region}: {cluster} クラスター\")\n\nif __name__ == \"__main__\":\n    main()